#BlueJ class context
comment0.params=
comment0.target=MyLinkedList()
comment0.text=\n\ Constructor\ without\ any\ arguments\ for\ a\ MyLinkedList()\ object.\ It\ sets\ all\ the\ \n\ instance\ variables\ to\ their\ default\ state\ -\ null\ or\ 0.\ \n\ @post\ -\ creates\ a\ MyLinkedList\ object\ and\ sets\ the\ first,\ last\ to\ null\ and\ the\ size\ \n\ to\ 0;\ these\ can\ be\ modified\ through\ use\ of\ the\ following\ methods.\ \n
comment1.params=
comment1.target=int\ size()
comment1.text=\n\ This\ method\ returns\ the\ size\ of\ a\ MyLinkedList\ object,\ stored\ in\ the\ \n\ myLinkedListSize\ state\ variable,\ changed\ whenever\ we\ add\ a\ method.\ \n\ @return\ the\ size\ of\ the\ linked\ list\n
comment10.params=
comment10.target=MyListIterator\ listIterator()
comment10.text=\n\ MyListIterator\ will\ be\ developed\ in\ a\ later\ lab.\n\ @return\ null\n
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\n\ This\ toString()\ method\ is\ inherited\ from\ the\ superclass\ Object;\ it\ is\ used\n\ in\ the\ tester\ to\ compare\ the\ desired\ linked\ list\ to\ the\ linked\ list\ that\ this\ \n\ code\ produces.\ It\ takes\ all\ of\ the\ values\ of\ a\ linked\ list\ and\ returns\ them\n\ in\ what\ visually\ appears\ to\ be\ an\ array,\ but\ is\ just\ a\ series\ of\ concatenated\ \n\ strings\ -\ this\ is\ accomplished\ through\ the\ use\ of\ a\ for\ loop.\n\ @return\ the\ linked\ list\ turned\ into\ a\ string\ that\ looks\ like\ an\ array\n
comment3.params=index\ list
comment3.target=DoubleNode\ traverseFromFront(int,\ DoubleNode)
comment3.text=\n\ This\ helper\ method\ will\ traverse\ a\ linked\ list\ and\ return\ the\ DoubleNode\n\ at\ the\ index\ that\ the\ user\ inputs.\ It\ is\ used\ in\ many\ of\ the\ following\ methods,\n\ and\ uses\ recursion\ to\ traverse\ the\ list.\ \n\ @param\ index\ the\ location\ of\ the\ DoubleNode\ which\ the\ user\ desires\n\ @param\ list\ the\ list\ that\ is\ to\ be\ traversed\n\ @return\ the\ DoubleNode\ associated\ with\ that\ index\n\ @throws\ IndexOutOfBoundsException()\ if\ the\ index\ is\ negative\ or\ greater\ than\ \n\ the\ size\ of\ the\ list\ (that\ is,\ greater\ than\ the\ myLinkedListSize\ instance\ variable).\ \n
comment4.params=obj
comment4.target=boolean\ add(java.lang.Object)
comment4.text=\n\ This\ method\ appends\ a\ value/object\ to\ the\ end\ of\ a\ given\ LinkedList.\ This\ simply\ \n\ uses\ the\ setNext()\ method\ to\ create\ a\ new\ ListNode\ with\ the\ desired\ value;\ it\ then\ \n\ reassigns\ the\ pointer\ last\ to\ this\ new\ ListNode\ and\ sets\ the\ previous\ pointer\ to\ \n\ the\ ListNode\ that\ was\ previously\ last\ using\ the\ setPrev\ method,\ running\ in\ O(1)\ time.\n\ @param\ the\ object\ to\ be\ appended\ to\ the\ end\ of\ the\ list\ in\ a\ new\ DoubleNode\n\ @return\ true\ -\ appending\ is\ always\ successful,\ no\ matter\ what\ the\ list's\ size\ \n\ @post\ the\ array\ is\ now\ one\ greater\ in\ length\ b/c\ of\ the\ new\ DoubleNode\ \n
comment5.params=index\ obj
comment5.target=void\ add(int,\ java.lang.Object)
comment5.text=\n\ This\ method\ will\ add\ an\ object\ at\ the\ desired\ index\ and\ then\ shift\ all\ the\ objects\ \n\ to\ its\ right\ one\ index\ down.\ We\ will\ traverse\ the\ linked\ list\ and\ perform\ this\ \n\ action\ through\ a\ series\ of\ pointer\ assignments.\ If\ the\ object\ is\ further\ down\ the\ \n\ linked\ list,\ it\ will\ take\ a\ longer\ time,\ making\ it\ run\ in\ O(n).\ \n\ @param\ index\ where\ we\ want\ to\ add\ the\ object\n\ @param\ obj\ the\ object\ that\ is\ to\ be\ added\ at\ the\ specific\ index\n\ @throws\ IndexOutOfBoundsException\ if\ the\ index\ is\ negative\ or\ greater\ than\ the\ size\n\ @post\ the\ array\ now\ has\ one\ new\ element\ at\ location\ index\n
comment6.params=index
comment6.target=java.lang.Object\ get(int)
comment6.text=\n\ This\ method\ gets\ the\ desired\ value\ at\ a\ specified\ index.\ Once\ again,\ we\ must\ \n\ traverse\ the\ linked\ list\ in\ order\ to\ get\ to\ this\ index.\ We\ can\ then\ just\ use\ the\ \n\ getValue()\ method\ to\ get\ this\ value.\ \ Runs\ in\ O(n)\ time.\ \n\ @param\ index\ is\ the\ location\ of\ the\ object\ that\ we\ want\ to\ get\n\ @return\ the\ object\ that\ is\ stored\ at\ index\n\ @throws\ IndexOutOfBoundsException()\ if\ the\ index\ is\ negative\ or\ greater\ than\ size\n
comment7.params=index\ obj
comment7.target=java.lang.Object\ set(int,\ java.lang.Object)
comment7.text=\n\ This\ method\ changes\ the\ value\ of\ a\ given\ index\ to\ the\ value\ that\ is\ input\ into\ the\ \n\ argument.\ Once\ again,\ we\ must\ traverse\ the\ linked\ list\ and\ then\ use\ the\ set\ method\ \n\ once\ we\ reach\ the\ desired\ index,\ using\ the\ .setValue()\ method.\ \ Runs\ in\ O(n)\ time.\n\ @param\ index\ is\ the\ index\ that\ we\ want\ to\ change\ to\ the\ new\ object\n\ @param\ obj\ is\ the\ replacement\ thing\ to\ put\ in\ the\ DoubleNode\n\ @return\ what\ was\ previously\ stored\ at\ the\ index\ specified\ \n\ @throws\ IndexOutOfBoundsException()\ if\ index\ is\ negative\ or\ greater\ than\ size\n
comment8.params=index
comment8.target=java.lang.Object\ remove(int)
comment8.text=\n\ This\ removes\ the\ value\ at\ a\ given\ index\ and\ shifts\ all\ the\ values\ after\ that\ back\ \n\ one.\ What\ we\ can\ do\ is\ just\ a\ little\ bit\ of\ pointer\ reassignment\ at\ the\ index.\ Runs\ \n\ in\ O(n)\ time,\ as\ we\ must\ traverse\ the\ list.\n\ @param\ index\ the\ location\ of\ the\ object\ that\ we\ want\ removed\n\ @return\ the\ object\ that\ was\ previously\ stored\ at\ index\n\ @throws\ IndexOutOfBoundsException()\ if\ index\ is\ negative\ or\ greater\ than\ size\n
comment9.params=
comment9.target=java.util.Iterator\ iterator()
comment9.text=\n\ Iterator\ will\ be\ developed\ in\ a\ later\ lab.\n\ @return\ null\n
numComments=11

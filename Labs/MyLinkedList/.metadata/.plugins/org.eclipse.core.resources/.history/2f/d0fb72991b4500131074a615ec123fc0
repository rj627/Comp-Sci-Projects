package myLinkedList; //package declaration

/*
 * This class provides for the implementation of a doubly linked list node (part of a 
 * linked list). Methods in this class enable the DoubleNode to change its value or any 
 * of the pointers to whatever the user desires; they also enable the user to get the 
 * value stored in a particular DoubleNode, or the next/previous DoubleNodes. 
 */
public class DoubleNode
{
	private Object value; //instance variable of what is stored in the DoubleNode
	private DoubleNode previous; //pointer to the previous DoubleNode in the list
	private DoubleNode next; //pointer to the next DoubleNode in the list

	/**
	 * This is the default constructor for DoubleNode, if the user has not specified
	 * any of the instance fields. Everything is set to null.
	 * @post creation of a new DoubleNode with all instance fields set to null
	 */
	public DoubleNode() 
	{
		value = null; //the user has not specified what is to be stored
		previous = null; //the user has not specified what it is to be connected to
		next = null; //the user has not specified what it is to be connected to
	}
	
	/**
	 * This is an overloaded constructor for a DoubleNode, given the value to be 
	 * stored. The user inputs the value, and a new DoubleNode is created.
	 * @param value what is to be stored in the DoubleNode
	 * @post creation of a new DoubleNode with a specified value but everything else null.
	 */
	public DoubleNode(Object value) 
	{
		this.value = value; //sets the instance variable to value
		previous = null; //user has not specified what the DoubleNode is to be connected to
		next = null; //user has not specified what the DoubleNode is to be connected to
	}
	
	public DoubleNode(Object value, DoubleNode previous, DoubleNode next)
	{
		this.value = value;
		this.previous = previous;
		this.next = next;
	}

	public Object getValue()
	{
		return value;
	}

	public DoubleNode getPrevious()
	{
		return previous;
	}

	public DoubleNode getNext()
	{
		return next;
	}

	public void setValue(Object v)
	{
		value = v;
	}

	public void setPrevious(DoubleNode p)
	{
		previous = p;
	}

	public void setNext(DoubleNode n)
	{
		next = n;
	}
}
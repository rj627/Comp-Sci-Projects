//import java.util.ArrayList;
import info.gridworld.grid.*;

import java.util.Random;
import java.util.concurrent.Semaphore;
import java.awt.Color;

public class Tetrad 
{
	private Block[] blocks;
	private MyBoundedGrid<Block> grid;
	private Color[] types = {Color.RED,Color.GRAY, Color.CYAN,Color.YELLOW,Color.MAGENTA,
			Color.BLUE,Color.GREEN};
	private Semaphore lock;
	
	
	public Tetrad(MyBoundedGrid<Block> gr)
	{
		grid = gr;
		
		Color chosen = types[new Random().nextInt(types.length)];
		
		blocks = new Block[4];
		
		lock = new Semaphore(1, true);
		
		for (int i = 0 ; i < 4; i++)
			blocks[i] = new Block();
		
		if (chosen.equals(Color.RED))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.RED);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2 - 1), 
							   new Location(1, grid.getNumCols()/2 - 1),
							   new Location(2, grid.getNumCols()/2 - 1),
							   new Location(3, grid.getNumCols()/2 - 1)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.GRAY))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.GRAY);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2 - 1), 
							   new Location(0, grid.getNumCols()/2 - 2),
							   new Location(0, grid.getNumCols()/2),
							   new Location(1, grid.getNumCols()/2 - 1)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.CYAN))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.CYAN);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2 - 1), 
							   new Location(0, grid.getNumCols()/2 - 2),
							   new Location(1, grid.getNumCols()/2 - 1),
							   new Location(1, grid.getNumCols()/2 - 2)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.YELLOW))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.YELLOW);
			
			Location[] locs = {new Location(1, grid.getNumCols()/2 -1), 
							   new Location(0, grid.getNumCols()/2 -1),
							   new Location(2, grid.getNumCols()/2 -1),
							   new Location(2, grid.getNumCols()/2)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.MAGENTA))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.MAGENTA);
			
			Location[] locs = {new Location(1, grid.getNumCols()/2 - 1), 
							   new Location(0, grid.getNumCols()/2 - 1),
							   new Location(2, grid.getNumCols()/2 -1),
							   new Location(2, grid.getNumCols()/2 - 2)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.BLUE))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.BLUE);
			
			Location[] locs = {new Location(1, grid.getNumCols()/2 - 1), 
							   new Location(1, grid.getNumCols()/2 - 2),
							   new Location(0, grid.getNumCols()/2 - 1),
							   new Location(0, grid.getNumCols()/2)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.GREEN))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.GREEN);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2 -1), 
							   new Location(1, grid.getNumCols()/2 -1),
							   new Location(1, grid.getNumCols()/2),
							   new Location(0, grid.getNumCols()/2 - 2)};
			
			addToLocations(grid, locs);
		}
	}
	
	private void addToLocations(MyBoundedGrid<Block> grid, Location[] locs)
	{
		for (int i = 0; i < locs.length; i++)
		{
			blocks[i].putSelfInGrid(grid, locs[i]);
		}
	}
	
	private Location[] removeBlocks()
	{
		Location[] prevLocs = new Location[4];
		
		for (int i = 0; i < 4; i ++)
		{
			prevLocs[i] = blocks[i].getLocation();
			blocks[i].removeSelfFromGrid();
		}
		
		return prevLocs;
			
	}
	
	private boolean areEmpty(MyBoundedGrid<Block> grid, Location[] locs)
	{
		for (int i = 0; i < locs.length; i++)
		{
			if (grid.get(locs[i])!= null) return false;
		}
		
		return true;
				
	}
	
	public boolean translate(int deltaRow, int deltaCol)
	{
		try
		{
			lock.acquire();
		
			Location[] newLocs = new Location[4];
		
			for (int i = 0; i < 4; i++)
			{
				newLocs[i] = new Location(blocks[i].getLocation().getRow() + deltaRow,
						 			  blocks[i].getLocation().getCol() + deltaCol);
			
				if (!grid.isValid(newLocs[i])) 
					return false;
			}
		

			Location[] temp = removeBlocks();
		
			if (areEmpty(grid, newLocs)) 
			{
				addToLocations(grid, newLocs);
				return true;
			}
		
			else
			{
				addToLocations(grid,temp);
				return false;
			}
		
		}
		
		catch (InterruptedException e)
		{
			return false;
		}
		
		finally
		{
			lock.release();
		}
	}
	
	public boolean rotate()
	{
		try
		{
			lock.acquire();
		
			Location[] newLocs = new Location[4];
			for (int i = 0; i < 4; i++)
			{
				Location currentLoc = blocks[0].getLocation();
				Location otherLoc = blocks[i].getLocation();
			
				newLocs[i] = new Location(currentLoc.getRow() - currentLoc.getCol() + otherLoc.getCol(),
						 			  currentLoc.getRow() + currentLoc.getCol() - otherLoc.getRow());
			
				if (!grid.isValid(newLocs[i])) 
					return false;
			}
		
			Location[] temp = removeBlocks();
		
			if (areEmpty(grid, newLocs)) 
			{
				addToLocations(grid, newLocs);
				return true;
			}
		
			else
			{
				addToLocations(grid,temp);

				return false;
			}
		}
		
		catch(InterruptedException e)
		{
			return false;
		}
		
		finally
		{
			lock.release();
		}
	}
}

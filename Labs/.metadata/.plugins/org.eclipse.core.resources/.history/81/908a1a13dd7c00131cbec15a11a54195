import info.gridworld.grid.Location;

//IMPORTANT: KNOWN ISSUES: WORKING SEMAPHORE NEEDED!, CLEAR ROWS NEEDS TO PUSH ROWS DOWN!!!!! (comment too lol)

/*
 * import info.gridworld.grid.*;
 * import java.util.ArrayList;
 * import java.util.Random;
*/

/*
 * This class implements the traditional game of Tetris, invented in Soviet Russia and then
 * brought over to the United States. It involves falling blocks that are able to be rotated
 * and translated; when a row is complete, it disappears and everything else is shifted down. 
 * Methods that this class implements include a zero-parameter constructor, methods that respond
 * accordingly when each of the arrow keys are pressed, a method that slowly moves the block
 * down, a method that checks whether a row is complete, a method that clears a row, and a method
 * that clears completed rows. In order to implement the key-press methods, the Tetris class 
 * inherits the methods from the ArrowListener interface - usable in a wide variety of cases. 
 * @author Rahul Jayaraman
 * @version 011613
 */
public class Tetris implements ArrowListener
{
	private MyBoundedGrid<Block> currentGrid;
	private BlockDisplay currentDisplay;
	private Tetrad currentTetrad;
	
	public Tetris()
	{
		currentGrid = new MyBoundedGrid<Block>(20,10);
		currentDisplay = new BlockDisplay(currentGrid);
		currentDisplay.setTitle("Tetris");
		currentDisplay.setArrowListener(this);
		currentTetrad = new Tetrad(currentGrid);
		currentDisplay.showBlocks();
	}

	@Override
	public void upPressed() 
	{
		if (currentTetrad.rotate())
			currentDisplay.showBlocks();
	}

	@Override
	public void downPressed() 
	{
		if (currentTetrad.translate(1, 0))
			currentDisplay.showBlocks();
	}

	@Override
	public void leftPressed() 
	{
		if (currentTetrad.translate(0, -1))
			currentDisplay.showBlocks();
	}

	@Override
	public void rightPressed() 
	{
		if (currentTetrad.translate(0, 1))
			currentDisplay.showBlocks();
	}
	
	public void play()
	{
		try
		{
			while (true)
			{
				if (currentTetrad.translate(1,0))
				{
					Thread.sleep(1000);
					currentDisplay.showBlocks();
				}
				else
				{
					clearCompletedRows();
					currentTetrad = new Tetrad(currentGrid);
					currentDisplay.showBlocks();
				}
			}
		}
		
		catch(InterruptedException e)
		{
		}	
	}
	
	private boolean isCompletedRow(int row)
	{
		if (row < 0 || row > currentGrid.getNumRows()) throw new IllegalArgumentException();
		
		int count = 0;
		
		for (int i = 0; i < currentGrid.getNumCols(); i++)
		{
			Location tested = new Location(row, i);
			if (currentGrid.get(tested) != null)
				count++;
		}
		
		if (count == currentGrid.getNumCols()) return true;
		
		else 
			return false;
	}
	
	private void clearRow(int row)
	{
		if (isCompletedRow(row)) 
		{
			for (int i = 0; i < currentGrid.getNumCols(); i++)
			{
				Location currentLoc = new Location(row, i);
				Block currentBlock = currentGrid.get(currentLoc);
				currentBlock.removeSelfFromGrid();
				currentDisplay.showBlocks();
			}
		}
	}
	
	private void clearCompletedRows()
	{
		for (int i = 0; i < currentGrid.getNumRows(); i++)
		{
			clearRow(i);
		}
	}
}

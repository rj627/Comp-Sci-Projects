import java.util.ArrayList;
import info.gridworld.grid.*;
import java.util.Random;
import java.awt.Color;

public class Tetrad 
{
	private Block[] blocks;
	private MyBoundedGrid<Block> grid;
	private Color[] types = {Color.RED,Color.GRAY, Color.CYAN,Color.YELLOW,Color.MAGENTA,
			Color.BLUE,Color.GREEN};
	
	
	public Tetrad(MyBoundedGrid<Block> gr)
	{
		grid = gr;
		
		Color chosen = types[new Random().nextInt(types.length)];
		
		blocks = new Block[4];
		
		for (int i = 0 ; i < 4; i++)
			blocks[i] = new Block();
		
		if (chosen.equals(Color.RED))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.RED);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2), 
							   new Location(1, grid.getNumCols()/2),
							   new Location(2, grid.getNumCols()/2),
							   new Location(3, grid.getNumCols()/2)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.GRAY))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.GRAY);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2), 
							   new Location(0, grid.getNumCols()/2 - 1),
							   new Location(0, grid.getNumCols()/2 + 1),
							   new Location(1, grid.getNumCols()/2)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.CYAN))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.CYAN);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2), 
							   new Location(0, grid.getNumCols()/2 - 1),
							   new Location(1, grid.getNumCols()/2),
							   new Location(1, grid.getNumCols()/2 - 1)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.YELLOW))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.YELLOW);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2), 
							   new Location(1, grid.getNumCols()/2),
							   new Location(2, grid.getNumCols()/2),
							   new Location(2, grid.getNumCols()/2 + 1)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.MAGENTA))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.MAGENTA);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2), 
							   new Location(1, grid.getNumCols()/2),
							   new Location(2, grid.getNumCols()/2),
							   new Location(2, grid.getNumCols()/2 - 1)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.BLUE))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.BLUE);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2), 
							   new Location(1, grid.getNumCols()/2 - 1),
							   new Location(1, grid.getNumCols()/2),
							   new Location(0, grid.getNumCols()/2 + 1)};
			
			addToLocations(grid, locs);
		}
		
		else if (chosen.equals(Color.GREEN))
		{
			for (int i = 0; i < 4; i ++)
				blocks[i].setColor(Color.GREEN);
			
			Location[] locs = {new Location(0, grid.getNumCols()/2), 
							   new Location(1, grid.getNumCols()/2),
							   new Location(1, grid.getNumCols()/2 + 1),
							   new Location(0, grid.getNumCols()/2 - 1)};
			
			addToLocations(grid, locs);
		}
	}
	
	private void addToLocations(MyBoundedGrid<Block> grid, Location[] locs)
	{
		for (int i = 0; i < locs.length; i++)
		{
			blocks[i].putSelfInGrid(grid, locs[i]);
		}
	}
}

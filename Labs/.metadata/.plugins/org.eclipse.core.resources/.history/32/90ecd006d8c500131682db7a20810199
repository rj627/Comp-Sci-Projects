/*
 * This class encloses the main method, where a heap implementation will be tested. This heavily relies
 * upon the HeapDisplay class to display the binary tree with the heap property - a complete binary tree
 * whose maximum value is at the root, and both left and right subtrees are heaps (a recursive structure). 
 * Methods created in HeapUtils will be tested in this class.
 * @author Rahul Jayaraman
 * @version 041514 
 */
public class HeapMain 
{
	/**
	 * This method is what we will use to test the heap implementation. In today's portion (4/15), we
	 * created an array of length 12, inserted random values into the last 11 indices, and displayed 
	 * a binary tree with those values. It's not a heap yet, as heapify() has not yet been applied. When it
	 * is, then the tree displayed will satisfy the heap property.  
	 * @param args - legacy-command line
	 */
	public static void main(String[] args) 
	{
		Integer[] intArray = new Integer[12]; //use Integers because the displayHeap() method needs Comparable
		
		//add random values
		for (int i = 1; i < 12; i++)
		{
			intArray[i] = (int) (Math.random() * 100);
			System.out.print(intArray[i] + " ");
		} //close for loop
		
		HeapDisplay disp = new HeapDisplay();
		HeapUtils.buildHeap(intArray, 11);
		disp.displayHeap(intArray, 11); //display the values in the newly-created array
	} //close main()

} //close HeapMain class
